name: V5 Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - installation
        - core-system  
        - integration

jobs:
  # Lint and static analysis
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pylint shellcheck-py
        
    - name: Lint Python code with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings for now
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Check Python formatting with black
      run: |
        black --check --diff src/
        
    - name: Lint shell scripts with shellcheck
      run: |
        find . -name "*.sh" -type f | xargs shellcheck
        shellcheck v5 install.sh get-v5.sh

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
    - name: Install BATS
      run: |
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
        
    - name: Install BATS helpers
      run: |
        sudo mkdir -p /usr/lib/bats
        sudo git clone https://github.com/bats-core/bats-support.git /usr/lib/bats/bats-support
        sudo git clone https://github.com/bats-core/bats-assert.git /usr/lib/bats/bats-assert
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run unit tests locally
      run: |
        export PYTHONPATH="$PWD/src:$PYTHONPATH"
        export BATS_LIB_PATH="/usr/lib/bats"
        ./test.sh --local core-system
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results-python-${{ matrix.python-version }}
        path: test-results/

  # Docker-based integration tests
  integration-tests:
    name: Integration Tests (Docker)
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test Docker image
      run: |
        docker build -f tests/Dockerfile -t v5-test .
        
    - name: Run Docker-based tests
      run: |
        ./test.sh --build --verbose
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-integration-test-results
        path: test-results/
        
    - name: Upload Docker logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: docker-logs
        path: |
          docker-compose.test.yml
          ./*.log

  # Cross-platform installation tests  
  installation-tests:
    name: Installation Tests
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv shellcheck
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install python3 shellcheck
        
    - name: Install BATS
      run: |
        git clone https://github.com/bats-core/bats-core.git /tmp/bats
        cd /tmp/bats
        sudo ./install.sh /usr/local
        
    - name: Test installation script
      run: |
        # Test dry-run installation
        chmod +x install.sh
        ./install.sh --help
        ./install.sh --version
        ./install.sh --check-deps
        
    - name: Test main executable
      run: |
        chmod +x v5
        ./v5 --help || true  # May fail without full setup, that's OK
        ./v5 --version || true
        
    - name: Run installation-specific tests
      run: |
        export PYTHONPATH="$PWD/src:$PYTHONPATH"
        ./test.sh --local installation

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance tests (optional)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
        
    - name: Run performance tests
      run: |
        # Basic performance checks
        export PYTHONPATH="$PWD/src:$PYTHONPATH"
        
        echo "Testing import performance..."
        time python3 -c "
        import sys
        sys.path.insert(0, 'src')
        from core.v5_system import V5System
        from utils.messaging import create_messenger  
        from utils.goal_parser import GoalParser
        print('Imports completed successfully')
        "
        
        echo "Testing goal parsing performance..."
        mkdir -p test_perf/.warp
        cat > test_perf/.warp/goal.yaml << EOF
        goal:
          primary: Performance test goal
          description: Testing goal parsing speed
        constraints:
          performance: optimized
        EOF
        
        time python3 -c "
        import sys
        sys.path.insert(0, 'src')
        from utils.goal_parser import GoalParser
        from pathlib import Path
        
        parser = GoalParser(Path('test_perf/.warp/goal.yaml'))
        for i in range(100):
            goal = parser.parse()
            summary = parser.get_summary_for_ai()
        print('Goal parsing performance test completed')
        "

  # Notification on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, installation-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.installation-tests.result == 'success' }}
      run: |
        echo "ðŸŽ‰ All V5 tests passed successfully!"
        echo "âœ… Unit tests: ${{ needs.unit-tests.result }}"
        echo "âœ… Integration tests: ${{ needs.integration-tests.result }}"
        echo "âœ… Installation tests: ${{ needs.installation-tests.result }}"
        echo "âœ… Security scan: ${{ needs.security-scan.result }}"
        
    - name: Notify failure
      if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.installation-tests.result == 'failure' }}
      run: |
        echo "ðŸ’¥ Some V5 tests failed!"
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"  
        echo "Installation tests: ${{ needs.installation-tests.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        exit 1