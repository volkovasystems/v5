# -*- mode: ruby -*-
# vi: set ft=ruby :

# ULTRA-FAST Warp Terminal API Testing VM
# Optimized for fastest download and setup with parallel processing

Vagrant.configure("2") do |config|
  # Fastest Ubuntu 22.04 server image (~500-800MB)
  config.vm.box = "ubuntu/jammy64"
  config.vm.hostname = "warp-test-vm"
  
  # Maximum download optimizations
  config.vm.box_download_insecure = false
  config.vm.boot_timeout = 600
  
  # Optimized SSH settings
  config.ssh.forward_agent = true
  config.ssh.keep_alive = true
  config.ssh.connect_timeout = 300
  config.ssh.compression = true
  
  # VirtualBox provider - optimized for speed and performance
  config.vm.provider "virtualbox" do |vb|
    vb.name = "warp-api-testbed"
    vb.memory = 4096  # 4GB for smooth operation
    vb.cpus = 2
    vb.gui = true
    
    # Display settings
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    
    # Network optimizations
    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    
    # Performance optimizations
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
  end

  # ROBUST SETUP - Error handling and graceful fallbacks
  config.vm.provision "robust_setup", type: "shell", run: "once", inline: <<-SHELL
    set -e  # Exit on any error
    export DEBIAN_FRONTEND=noninteractive
    
    echo "🚀 ROBUST VM Setup - With Error Handling"
    echo "⏰ Starting at: $(date)"
    
    # Function to show progress in GUI (if available)
    show_progress() {
        local message="$1"
        local step="$2"
        local total="$3"
        
        echo "$message"
        
        # Try to show progress in GUI if X is running
        if command -v notify-send >/dev/null 2>&1 && [ -n "$DISPLAY" ] 2>/dev/null; then
            notify-send "VM Setup Progress" "[$step/$total] $message" 2>/dev/null &
        fi
        
        # Also try to show in any open terminal
        if command -v wall >/dev/null 2>&1; then
            echo "[VM Setup $step/$total] $message" | wall 2>/dev/null || true
        fi
    }
    
    # Function to handle errors gracefully
    handle_error() {
        echo "❌ Error occurred in: $1"
        echo "⚠️ Continuing with setup, but some features may be limited"
        return 0  # Don't fail the entire setup
    }
    
    # Function to retry commands
    retry_command() {
        local max_attempts=3
        local delay=5
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if eval "$1"; then
                return 0
            else
                echo "⚠️ Attempt $attempt failed, retrying in ${delay}s..."
                sleep $delay
                attempt=$((attempt + 1))
                delay=$((delay * 2))  # Exponential backoff
            fi
        done
        
        handle_error "$2"
        return 1
    }
    
    # Safer APT configuration
    echo "📋 Configuring APT for reliability..."
    cat > /etc/apt/apt.conf.d/99robust-setup << 'EOF'
APT::Acquire::Retries "5";
APT::Acquire::Queue-Mode "host";
DPkg::Options {
   "--force-confold";
   "--force-confdef";
};
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF
    
    # Update package lists with retry
    show_progress "Updating package lists..." "1" "8"
    retry_command "apt-get update -qq" "package list update"
    
    # Install packages in stages to handle failures better
    show_progress "Installing core packages..." "2" "8"
    
    # Stage 1: Essential system packages (fix pip issue)
    retry_command "apt-get install -y curl wget python3" "core system packages"
    
    # Fix the pip installation issue that caused the red error
    show_progress "Installing pip properly..." "3" "8"
    apt-get install -y python3-pip python3-setuptools python3-wheel >/dev/null 2>&1 || {
        echo "📥 Installing pip via get-pip.py to fix the error..."
        curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py 2>/dev/null
        python3 get-pip.py --user >/dev/null 2>&1
        rm -f get-pip.py
    }
    
    # Verify pip is working (suppress error output)
    python3 -m pip --version >/dev/null 2>&1 || echo "⚠️ pip may need manual setup later"
    
    # Stage 2: GUI automation tools
    show_progress "Installing GUI automation tools..." "4" "8"
    retry_command "apt-get install -y xdotool wmctrl imagemagick" "GUI automation tools"
    
    # Stage 3: Desktop environment (optional, continue if fails)
    show_progress "Installing minimal desktop environment..." "5" "8"
    if ! retry_command "apt-get install -y ubuntu-desktop-minimal" "desktop environment"; then
        echo "⚠️ Desktop install failed, trying GNOME core instead..."
        retry_command "apt-get install -y gnome-shell gnome-terminal firefox" "GNOME core" || handle_error "all desktop installs"
    fi
    
    # Stage 4: Python packages with better error handling
    show_progress "Installing Python automation packages..." "6" "8"
    
    # Create a proper environment for Python packages
    export PATH="/home/vagrant/.local/bin:$PATH"
    
    # Install Python packages as vagrant user with better error handling
    sudo -u vagrant bash -c '
        export PATH="/home/vagrant/.local/bin:$PATH"
        
        # Install packages one by one to avoid complete failure
        echo "🐍 Installing Python packages individually..."
        
        for package in pyautogui pillow opencv-python-headless; do
            if python3 -m pip install --user --no-warn-script-location "$package" >/dev/null 2>&1; then
                echo "✅ $package installed"
            else
                echo "⚠️ $package failed, continuing..."
            fi
        done
        
        # Fallback to system packages for essential ones
        if ! python3 -c "import PIL" >/dev/null 2>&1; then
            echo "📦 Installing Pillow via system package..."
            sudo apt-get install -y python3-pil >/dev/null 2>&1 || true
        fi
    '
    
    # Stage 5: Download Warp Terminal (fix 404 error by using correct URL)
    show_progress "Downloading Warp Terminal..." "7" "8"
    
    WARP_SUCCESS=false
    
    # Fix the 404 error by using the correct Warp download URL
    WARP_URLS=(
        "https://releases.warp.dev/stable/latest/warp-terminal_amd64.deb"
        "https://app.warp.dev/download?package=deb"
        "https://releases.warp.dev/linux/latest/warp-terminal_amd64.deb"
    )
    
    for url in "${WARP_URLS[@]}"; do
        echo "Trying URL: $url"
        if curl -fsSL --connect-timeout 30 --max-time 300 "$url" -o warp-terminal.deb >/dev/null 2>&1; then
            # Verify the file is actually a .deb package
            if file warp-terminal.deb | grep -q "Debian binary package"; then
                WARP_SUCCESS=true
                echo "✅ Warp Terminal downloaded successfully"
                break
            else
                echo "⚠️ Downloaded file is not a valid .deb package, trying next URL..."
                rm -f warp-terminal.deb
            fi
        fi
    done
    
    if [ "$WARP_SUCCESS" != true ]; then
        echo "⚠️ All Warp download URLs failed - VM will work without Warp Terminal"
    fi
    
    # Install Warp Terminal if download succeeded
    if [ "$WARP_SUCCESS" = true ] && [ -f warp-terminal.deb ]; then
        echo "📦 Installing Warp Terminal..."
        if dpkg -i warp-terminal.deb; then
            echo "✅ Warp Terminal installed successfully"
        else
            echo "🔧 Fixing dependencies..."
            apt-get install -f -y && dpkg -i warp-terminal.deb || handle_error "Warp Terminal installation"
        fi
        rm -f warp-terminal.deb
    else
        echo "⚠️ Skipping Warp Terminal installation due to download failure"
    fi
    
    # Configure auto-login for visible setup process
    show_progress "Configuring GUI and finalizing setup..." "8" "8"
    
    # Set up password-less login for vagrant user
    echo "🔐 Setting up password-less login for vagrant user..."
    passwd -d vagrant  # Remove password requirement
    
    # Enable auto-login for vagrant user
    mkdir -p /etc/gdm3
    cat > /etc/gdm3/custom.conf << 'EOF'
# GDM configuration storage
[daemon]
# Force X11 instead of Wayland for better compatibility
WaylandEnable=false
DefaultSession=ubuntu.desktop

# Enabling automatic login
AutomaticLoginEnable = true
AutomaticLogin = vagrant

[security]

[xdmcp]

[chooser]

[debug]
Enable = true
EOF

    # Also set up LightDM as fallback (in case GDM3 has issues)
    if command -v lightdm >/dev/null 2>&1; then
        cat > /etc/lightdm/lightdm.conf << 'EOF'
[Seat:*]
autologin-user=vagrant
autologin-user-timeout=0
autologin-session=ubuntu
EOF
    fi
    
    # Set up a visible startup script that shows progress
    cat > /home/vagrant/.profile << 'EOF'
# Auto-start terminal with setup status on login
if [ "$XDG_SESSION_TYPE" = "x11" ] || [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    # Wait a moment for desktop to load
    sleep 3
    
    # Open terminal showing setup progress
    gnome-terminal --title="Warp Testing VM - Ready!" --geometry=100x30 -- bash -c '
        echo "\033[1;32m✅ Warp Testing VM Setup Complete!\033[0m"
        echo "\033[1;34m🔧 Available commands:\033[0m"
        echo "  - Run API tests: cd /home/vagrant/warp-testing && python3 warp_api.py"
        echo "  - Check system: htop, df -h, free -h"
        echo "  - GUI automation tools: xdotool, wmctrl"
        echo ""
        echo "\033[1;33m💡 This VM is ready for Warp terminal testing!\033[0m"
        echo ""
        echo "Press Enter to continue or Ctrl+C to exit..."
        read
        bash
    ' &
    
    # Also show a desktop notification
    notify-send "Warp Testing VM" "Setup complete! VM is ready for testing." &
fi
EOF
    
    chown vagrant:vagrant /home/vagrant/.profile
    
    # Restart display manager to apply auto-login immediately
    echo "🔄 Restarting display manager to enable auto-login..."
    systemctl restart gdm3 &
    sleep 2  # Give it a moment to restart
    
    # Create optimized directory structure
    echo "📱 Creating test environment..."
    sudo -u vagrant mkdir -p /home/vagrant/warp-testing/{logs,reports,results,screenshots}
    
    # Copy API file if available
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py /home/vagrant/warp-testing/
      chmod +x /home/vagrant/warp-testing/warp_api.py
      chown -R vagrant:vagrant /home/vagrant/warp-testing
    fi
    
    # Create a desktop shortcut for easy access
    sudo -u vagrant mkdir -p /home/vagrant/Desktop
    cat > /home/vagrant/Desktop/warp-testing.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Warp API Testing
Comment=Open Warp API testing directory
Exec=nautilus /home/vagrant/warp-testing
Icon=folder
Terminal=false
StartupNotify=true
EOF
    
    chmod +x /home/vagrant/Desktop/warp-testing.desktop
    chown vagrant:vagrant /home/vagrant/Desktop/warp-testing.desktop
    
    # Clean up package cache to save space
    apt-get clean
    apt-get autoremove -y >/dev/null 2>&1
    
    echo "⏰ Setup completed at: $(date)"
    echo "✅ ULTRA-FAST VM setup complete!"
    echo "🎯 VM is ready for snapshot creation and testing"
    echo "🖱️ GUI will auto-login and show setup status on next boot"
    
  SHELL
  
  # Quick test environment setup
  config.vm.provision "test_setup", type: "shell", run: "never", inline: <<-SHELL
    echo "🧪 Setting up clean test environment..."
    cd /home/vagrant/warp-testing
    
    # Clean previous test data
    rm -rf logs/* reports/* results/* screenshots/* 2>/dev/null || true
    
    # Sync latest API file
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py ./
      chmod +x warp_api.py
      chown vagrant:vagrant warp_api.py
    fi
    
    echo "✅ Test environment ready for execution"
  SHELL
  
  # Fast cleanup
  config.vm.provision "test_cleanup", type: "shell", run: "never", inline: <<-SHELL
    echo "🧹 Fast cleanup..."
    
    # Kill any running processes
    pkill -f warp 2>/dev/null || true
    pkill -f xtrlock 2>/dev/null || true
    
    # Archive results
    cd /home/vagrant/warp-testing
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    if ls logs/*.log >/dev/null 2>&1 || ls reports/* >/dev/null 2>&1; then
      tar -czf "/vagrant/test_results_${timestamp}.tar.gz" \
        logs/ reports/ results/ screenshots/ 2>/dev/null || true
      echo "📦 Results archived: test_results_${timestamp}.tar.gz"
    fi
    
    # Clean directories
    find logs reports results screenshots -type f -delete 2>/dev/null || true
    
    echo "✅ Fast cleanup complete"
  SHELL
end