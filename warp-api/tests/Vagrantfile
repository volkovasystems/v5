# -*- mode: ruby -*-
# vi: set ft=ruby :

# ULTRA-FAST Warp Terminal API Testing VM
# Optimized for fastest download and setup with parallel processing

Vagrant.configure("2") do |config|
  # Fastest Ubuntu 22.04 server image (~500-800MB)
  config.vm.box = "ubuntu/jammy64"
  config.vm.hostname = "warp-test-vm"
  
  # Maximum download optimizations
  config.vm.box_download_insecure = false
  config.vm.boot_timeout = 600
  
  # Optimized SSH settings
  config.ssh.forward_agent = true
  config.ssh.keep_alive = true
  config.ssh.connect_timeout = 300
  config.ssh.compression = true
  
  # VirtualBox provider - optimized for speed and performance
  config.vm.provider "virtualbox" do |vb|
    vb.name = "warp-api-testbed"
    vb.memory = 4096  # 4GB for smooth operation
    vb.cpus = 2
    vb.gui = true
    
    # Display settings
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    
    # Network optimizations
    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    
    # Performance optimizations
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
  end

  # ULTRA-FAST SETUP - Parallel processing and minimal packages
  config.vm.provision "ultra_fast_setup", type: "shell", run: "once", inline: <<-SHELL
    export DEBIAN_FRONTEND=noninteractive
    
    echo "üöÄ ULTRA-FAST VM Setup - Parallel Processing Enabled"
    echo "‚è∞ Starting at: $(date)"
    
    # Enable parallel package downloads and processing
    echo 'APT::Acquire::Max-Default "16";' > /etc/apt/apt.conf.d/99parallel
    echo 'APT::Acquire::Retries "3";' >> /etc/apt/apt.conf.d/99parallel
    echo 'Dpkg::Options {"--force-confold"};' >> /etc/apt/apt.conf.d/99parallel
    
    # Fastest package update
    echo "üì¶ Updating package lists with parallel processing..."
    apt-get update -qq -o Acquire::Queue-Mode=access &
    
    # Prepare package lists in background
    {
      # Essential GUI packages (minimal set)
      PACKAGES="ubuntu-desktop-minimal firefox curl wget python3 python3-pip xdotool wmctrl imagemagick"
      
      # Pre-download packages in parallel
      apt-get download $PACKAGES >/dev/null 2>&1 &
    } &
    
    # Wait for update to complete
    wait
    
    echo "‚ö° Installing essential packages with parallel processing..."
    # Install with maximum parallelism and minimal recommendations
    apt-get install -y --no-install-recommends \
      -o DPkg::Options::="--force-confold" \
      -o APT::Install-Suggests="false" \
      ubuntu-desktop-minimal \
      firefox \
      curl \
      wget \
      python3 \
      python3-pip \
      xdotool \
      wmctrl \
      imagemagick \
      aria2 &  # Add aria2 for faster downloads
    
    # Parallel Warp Terminal download
    {
      echo "üî• Downloading Warp Terminal..."
      # Use aria2 for parallel downloading if available, fallback to curl
      if command -v aria2c >/dev/null 2>&1; then
        aria2c -x 8 -s 8 -k 1M https://releases.warp.dev/linux/latest/warp-terminal_amd64.deb -o warp-terminal.deb ||
        curl -fsSL https://releases.warp.dev/linux/latest/warp-terminal_amd64.deb -o warp-terminal.deb
      else
        curl -fsSL https://releases.warp.dev/linux/latest/warp-terminal_amd64.deb -o warp-terminal.deb ||
        wget -q --timeout=30 --tries=3 https://releases.warp.dev/linux/latest/warp-terminal_amd64.deb -O warp-terminal.deb
      fi
    } &
    
    # Parallel Python package installation
    {
      echo "üêç Installing Python automation packages..."
      # Install essential Python packages only
      sudo -u vagrant python3 -m pip install --user --no-warn-script-location pyautogui pillow
    } &
    
    # Wait for all parallel installations
    wait
    
    # Install Warp Terminal
    if [ -f warp-terminal.deb ]; then
      echo "üì¶ Installing Warp Terminal..."
      dpkg -i warp-terminal.deb || apt-get install -f -y >/dev/null 2>&1
      rm warp-terminal.deb
      echo "‚úÖ Warp Terminal installed successfully"
    else
      echo "‚ö†Ô∏è Warning: Could not download Warp Terminal"
    fi
    
    # Create optimized directory structure
    echo "üìÅ Creating test environment..."
    sudo -u vagrant mkdir -p /home/vagrant/warp-testing/{logs,reports,results,screenshots}
    
    # Copy API file if available
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py /home/vagrant/warp-testing/
      chmod +x /home/vagrant/warp-testing/warp_api.py
      chown -R vagrant:vagrant /home/vagrant/warp-testing
    fi
    
    # Clean up package cache to save space
    apt-get clean
    apt-get autoremove -y >/dev/null 2>&1
    
    echo "‚è∞ Setup completed at: $(date)"
    echo "‚úÖ ULTRA-FAST VM setup complete!"
    echo "üéØ VM is ready for snapshot creation and testing"
    
  SHELL
  
  # Quick test environment setup
  config.vm.provision "test_setup", type: "shell", run: "never", inline: <<-SHELL
    echo "üß™ Setting up clean test environment..."
    cd /home/vagrant/warp-testing
    
    # Clean previous test data
    rm -rf logs/* reports/* results/* screenshots/* 2>/dev/null || true
    
    # Sync latest API file
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py ./
      chmod +x warp_api.py
      chown vagrant:vagrant warp_api.py
    fi
    
    echo "‚úÖ Test environment ready for execution"
  SHELL
  
  # Fast cleanup
  config.vm.provision "test_cleanup", type: "shell", run: "never", inline: <<-SHELL
    echo "üßπ Fast cleanup..."
    
    # Kill any running processes
    pkill -f warp 2>/dev/null || true
    pkill -f xtrlock 2>/dev/null || true
    
    # Archive results
    cd /home/vagrant/warp-testing
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    if ls logs/*.log >/dev/null 2>&1 || ls reports/* >/dev/null 2>&1; then
      tar -czf "/vagrant/test_results_${timestamp}.tar.gz" \
        logs/ reports/ results/ screenshots/ 2>/dev/null || true
      echo "üì¶ Results archived: test_results_${timestamp}.tar.gz"
    fi
    
    # Clean directories
    find logs reports results screenshots -type f -delete 2>/dev/null || true
    
    echo "‚úÖ Fast cleanup complete"
  SHELL
end