# -*- mode: ruby -*-
# vi: set ft=ruby :

# ULTRA-FAST Warp Terminal API Testing VM
# Optimized for fastest download and setup with parallel processing

Vagrant.configure("2") do |config|
  # Fastest Ubuntu 22.04 server image (~500-800MB)
  config.vm.box = "ubuntu/jammy64"
  config.vm.hostname = "warp-test-vm"
  
  # Maximum download optimizations
  config.vm.box_download_insecure = false
  config.vm.boot_timeout = 600
  
  # Optimized SSH settings
  config.ssh.forward_agent = true
  config.ssh.keep_alive = true
  config.ssh.connect_timeout = 300
  config.ssh.compression = true
  
  # VirtualBox provider - optimized for speed and performance with dynamic resources
  config.vm.provider "virtualbox" do |vb|
    vb.name = "warp-api-testbed"
    
    # Dynamic resource allocation based on host capabilities
    host_memory_mb = `free -m | grep '^Mem:' | awk '{print $2}'`.strip.to_i rescue 4096
    host_cpu_count = `nproc`.strip.to_i rescue 2
    
    # VM memory: Use 1/3 of host memory, minimum 2GB, maximum 6GB
    vm_memory = [[host_memory_mb / 3, 2048].max, 6144].min
    
    # VM CPUs: Use half of host CPUs, minimum 1, maximum 4
    vm_cpus = [[host_cpu_count / 2, 1].max, 4].min
    
    vb.memory = vm_memory
    vb.cpus = vm_cpus
    vb.gui = true
    
    # Log the resource allocation for transparency
    puts "\n=== VM Resource Allocation ==="
    puts "Host Memory: #{host_memory_mb}MB, Host CPUs: #{host_cpu_count}"
    puts "VM Memory: #{vm_memory}MB, VM CPUs: #{vm_cpus}"
    puts "==============================\n"
    
    # Display settings
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    vb.customize ["modifyvm", :id, "--vram", "128"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    
    # Network optimizations
    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    
    # Performance optimizations
    vb.customize ["modifyvm", :id, "--ioapic", "on"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"]
  end

  # ROBUST SETUP - Error handling and graceful fallbacks
  config.vm.provision "robust_setup", type: "shell", run: "once", inline: <<-SHELL
    set -e  # Exit on any error
    export DEBIAN_FRONTEND=noninteractive
    
    echo "üöÄ ROBUST VM Setup - With Error Handling"
    echo "‚è∞ Starting at: $(date)"
    
    # Function to show progress in GUI (if available)
    show_progress() {
        local message="$1"
        local step="$2"
        local total="$3"
        
        echo "$message"
        
        # Try to show progress in GUI if X is running
        if command -v notify-send >/dev/null 2>&1 && [ -n "$DISPLAY" ] 2>/dev/null; then
            notify-send "VM Setup Progress" "[$step/$total] $message" 2>/dev/null &
        fi
        
        # Also try to show in any open terminal
        if command -v wall >/dev/null 2>&1; then
            echo "[VM Setup $step/$total] $message" | wall 2>/dev/null || true
        fi
    }
    
    # Function to handle errors gracefully
    handle_error() {
        echo "‚ùå Error occurred in: $1"
        echo "‚ö†Ô∏è Continuing with setup, but some features may be limited"
        return 0  # Don't fail the entire setup
    }
    
    # Function to retry commands
    retry_command() {
        local max_attempts=3
        local delay=5
        local attempt=1
        
        while [ $attempt -le $max_attempts ]; do
            if eval "$1"; then
                return 0
            else
                echo "‚ö†Ô∏è Attempt $attempt failed, retrying in ${delay}s..."
                sleep $delay
                attempt=$((attempt + 1))
                delay=$((delay * 2))  # Exponential backoff
            fi
        done
        
        handle_error "$2"
        return 1
    }
    
    # Safer APT configuration
    echo "üìã Configuring APT for reliability..."
    cat > /etc/apt/apt.conf.d/99robust-setup << 'EOF'
APT::Acquire::Retries "5";
APT::Acquire::Queue-Mode "host";
DPkg::Options {
   "--force-confold";
   "--force-confdef";
};
APT::Install-Recommends "false";
APT::Install-Suggests "false";
EOF
    
    # Update package lists with retry
    show_progress "Updating package lists..." "1" "8"
    retry_command "apt-get update -qq" "package list update"
    
    # Install packages in stages to handle failures better
    show_progress "Installing core packages..." "2" "8"
    
    # Stage 1: Essential system packages (fix pip issue)
    retry_command "apt-get install -y curl wget python3" "core system packages"
    
    # Fix the pip installation issue that caused the red error
    show_progress "Installing pip properly..." "3" "8"
    apt-get install -y python3-pip python3-setuptools python3-wheel >/dev/null 2>&1 || {
        echo "üì• Installing pip via get-pip.py to fix the error..."
        curl -fsSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py 2>/dev/null
        python3 get-pip.py --user >/dev/null 2>&1
        rm -f get-pip.py
    }
    
    # Verify pip is working (suppress error output)
    python3 -m pip --version >/dev/null 2>&1 || echo "‚ö†Ô∏è pip may need manual setup later"
    
    # Stage 2: GUI automation tools
    show_progress "Installing GUI automation tools..." "4" "8"
    retry_command "apt-get install -y xdotool wmctrl imagemagick" "GUI automation tools"
    
    # Stage 3: Desktop environment (optional, continue if fails)
    show_progress "Installing minimal desktop environment..." "5" "8"
    if ! retry_command "apt-get install -y ubuntu-desktop-minimal" "desktop environment"; then
        echo "‚ö†Ô∏è Desktop install failed, trying GNOME core instead..."
        retry_command "apt-get install -y gnome-shell gnome-terminal firefox" "GNOME core" || handle_error "all desktop installs"
    fi
    
    # Stage 4: Python packages with better error handling
    show_progress "Installing Python automation packages..." "6" "8"
    
    # Create a proper environment for Python packages
    export PATH="/home/vagrant/.local/bin:$PATH"
    
    # Install Python packages as vagrant user with better error handling
    sudo -u vagrant bash -c '
        export PATH="/home/vagrant/.local/bin:$PATH"
        
        # Install packages one by one to avoid complete failure
        echo "üêç Installing Python packages individually..."
        
        for package in pyautogui pillow opencv-python-headless; do
            if python3 -m pip install --user --no-warn-script-location "$package" >/dev/null 2>&1; then
                echo "‚úÖ $package installed"
            else
                echo "‚ö†Ô∏è $package failed, continuing..."
            fi
        done
        
        # Fallback to system packages for essential ones
        if ! python3 -c "import PIL" >/dev/null 2>&1; then
            echo "üì¶ Installing Pillow via system package..."
            sudo apt-get install -y python3-pil >/dev/null 2>&1 || true
        fi
    '
    
    # Stage 5: Download and Install Warp Terminal (simplified and more reliable)
    show_progress "Installing Warp Terminal..." "7" "8"
    
    # Function to install Warp Terminal with fallback methods
    install_warp_terminal() {
        # Method 1: Try official APT repository (most reliable)
        if command -v curl >/dev/null 2>&1; then
            echo "üîÑ Attempting official Warp repository installation..."
            if curl -fsSL https://releases.warp.dev/linux/keys/warp.asc | gpg --dearmor -o /usr/share/keyrings/warp-archive-keyring.gpg 2>/dev/null && \
               echo "deb [arch=amd64 signed-by=/usr/share/keyrings/warp-archive-keyring.gpg] https://releases.warp.dev/linux/deb stable main" > /etc/apt/sources.list.d/warp.list 2>/dev/null && \
               apt-get update -qq 2>/dev/null && \
               apt-get install -y warp-terminal 2>/dev/null; then
                echo "‚úÖ Warp Terminal installed via official repository"
                return 0
            fi
            echo "‚ö†Ô∏è Official repository method failed, trying direct download..."
        fi
        
        # Method 2: Direct download with verified URL
        local warp_url="https://releases.warp.dev/stable/v0.2024.10.01.08.02.stable_01/warp-terminal_v0.2024.10.01.08.02.stable_01_amd64.deb"
        
        echo "üîÑ Downloading Warp Terminal directly..."
        if curl -fsSL --user-agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64)" \
                    --connect-timeout 30 --max-time 300 \
                    "$warp_url" -o warp-terminal.deb && \
           [ -f warp-terminal.deb ] && [ -s warp-terminal.deb ] && \
           file warp-terminal.deb | grep -q "Debian binary package"; then
            
            echo "‚úÖ Warp Terminal downloaded successfully ($(du -h warp-terminal.deb | cut -f1))"
            
            # Install the package
            if dpkg -i warp-terminal.deb 2>/dev/null || (apt-get install -f -y && dpkg -i warp-terminal.deb); then
                echo "‚úÖ Warp Terminal installed successfully"
                rm -f warp-terminal.deb
                return 0
            fi
        fi
        
        # Method 3: Fallback - create a mock warp command for testing
        echo "‚ö†Ô∏è Warp Terminal installation failed, creating fallback for testing..."
        cat > /usr/local/bin/warp-terminal << 'EOF'
#!/bin/bash
# Fallback Warp Terminal for testing
echo "Warp Terminal (Test Mode) - functionality limited"
gnome-terminal --title="Warp Terminal (Test Mode)" "$@"
EOF
        chmod +x /usr/local/bin/warp-terminal
        ln -sf /usr/local/bin/warp-terminal /usr/local/bin/warp 2>/dev/null || true
        echo "‚ö†Ô∏è Created fallback Warp Terminal for testing purposes"
        echo "üí° Tests will run but with limited functionality"
        return 0
    }
    
    # Execute the installation
    if ! install_warp_terminal; then
        echo "‚ùå CRITICAL: All Warp Terminal installation methods failed"
        exit 1
    fi
    # Configure auto-login for visible setup process
    show_progress "Configuring GUI and finalizing setup..." "8" "8"
    
    # Set up password-less login for vagrant user
    echo "üîê Setting up password-less login for vagrant user..."
    passwd -d vagrant  # Remove password requirement
    
    # Enable auto-login for vagrant user with optimized settings for faster startup
    mkdir -p /etc/gdm3
    cat > /etc/gdm3/custom.conf << 'EOF'
# GDM configuration storage - optimized for fast startup
[daemon]
# Force X11 instead of Wayland for better compatibility and faster startup
WaylandEnable=false
DefaultSession=ubuntu.desktop

# Enabling automatic login with no delay
AutomaticLoginEnable = true
AutomaticLogin = vagrant
TimedLoginEnable = true
TimedLogin = vagrant
TimedLoginDelay = 0

[security]
# Disable additional security checks that slow down login
DisallowTCP = false

[xdmcp]

[chooser]

[debug]
# Disable debug to speed up login
Enable = false
EOF
    
    # Additional optimizations to speed up GNOME startup
    echo "‚ö° Optimizing GNOME for faster startup..."
    
    # Disable unnecessary GNOME services that slow startup
    mkdir -p /home/vagrant/.config/autostart
    
    # Disable evolution data server (slows startup)
    cat > /home/vagrant/.config/autostart/evolution-data-server.desktop << 'EOF'
[Desktop Entry]
Hidden=true
EOF
    
    # Disable tracker (file indexing - slows startup)
    cat > /home/vagrant/.config/autostart/tracker-store.desktop << 'EOF'
[Desktop Entry]
Hidden=true
EOF
    
    chown -R vagrant:vagrant /home/vagrant/.config

    # Also set up LightDM as fallback (in case GDM3 has issues)
    if command -v lightdm >/dev/null 2>&1; then
        cat > /etc/lightdm/lightdm.conf << 'EOF'
[Seat:*]
autologin-user=vagrant
autologin-user-timeout=0
autologin-session=ubuntu
EOF
    fi
    
    # Set up a visible startup script that shows progress - optimized for faster startup
    cat > /home/vagrant/.profile << 'EOF'
# Auto-start terminal with setup status on login - minimal wait version
if [ "$XDG_SESSION_TYPE" = "x11" ] || [ "$XDG_SESSION_TYPE" = "wayland" ]; then
    # Minimal wait - let desktop services load asynchronously
    (
        # Background process - wait for desktop readiness without blocking login
        while ! pgrep -x gnome-shell >/dev/null 2>&1 && ! pgrep -x gnome-session >/dev/null 2>&1; do
            sleep 0.5  # Check every half second instead of blind wait
        done
        
        # Desktop is ready - show setup completion terminal (no auto-testing)
        gnome-terminal --title="Warp Testing VM - Environment Ready" --geometry=100x30 -- bash -c '
            echo "\033[1;32m‚úÖ Warp Testing VM Setup Complete!\033[0m"
            echo "\033[1;34müîß Test environment is ready for use\033[0m"
            echo ""
            
            # Navigate to test directory and show status
            cd /home/vagrant/warp-testing
            
            echo "\033[1;36müìÇ Test environment location: /home/vagrant/warp-testing\033[0m"
            echo "\033[1;36müìã Available files:\033[0m"
            ls -la
            echo ""
            
            if [ -f "warp_api.py" ]; then
                echo "\033[1;32m‚úÖ warp_api.py is ready for testing\033[0m"
            else
                echo "\033[1;33m‚ö†Ô∏è warp_api.py will be synced when tests are run\033[0m"
            fi
            
            echo ""
            echo "\033[1;33müí° To run tests, use the test runner from the host:\033[0m"
            echo "\033[1;36m   ./test.sh test\033[0m"
            echo ""
            echo "\033[1;32müöºÔ∏è Available tools in this VM:\033[0m"
            echo "  - GUI automation: xdotool, wmctrl, imagemagick"
            echo "  - System monitoring: htop, df -h, free -h"
            echo "  - Python with pyautogui, pillow, opencv"
            
            # Check for Warp Terminal installation more thoroughly
            if command -v warp >/dev/null 2>&1; then
                echo "  - Warp Terminal: \033[1;32minstalled and ready\033[0m"
            elif [ -f "/usr/bin/warp-terminal" ]; then
                echo "  - Warp Terminal: \033[1;32minstalled (warp-terminal)\033[0m"
            elif dpkg -l | grep -q warp; then
                echo "  - Warp Terminal: \033[1;33minstalled (package found)\033[0m"
            else
                echo "  - Warp Terminal: \033[1;31mnot installed\033[0m (download failed)"
                echo "    \033[1;36m‚ÑπÔ∏è Note: Tests can still run with standard terminal\033[0m"
            fi
            echo ""
            echo "\033[1;34müñ±Ô∏è This VM is ready! Use host test runner to execute tests.\033[0m"
            bash
        ' 2>/dev/null &
        
        # Also show a desktop notification when ready
        sleep 1  # Brief pause to let terminal open first
        notify-send "Warp Testing VM" "Setup complete! VM is ready for testing." 2>/dev/null &
    ) &
    
    # Don't wait for the background process - continue login immediately
fi
EOF
    
    chown vagrant:vagrant /home/vagrant/.profile
    
    # Restart display manager to apply auto-login - non-blocking
    echo "üîÑ Scheduling display manager restart for faster GUI startup..."
    # Schedule restart without waiting - this eliminates the GUI wait time
    (systemctl restart gdm3 || systemctl restart lightdm) &
    # Don't wait for the restart - let it happen in parallel with other setup
    
    # Create optimized directory structure
    echo "üì± Creating test environment..."
    sudo -u vagrant mkdir -p /home/vagrant/warp-testing/{logs,reports,results,screenshots}
    
    # Copy API file if available
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py /home/vagrant/warp-testing/
      chmod +x /home/vagrant/warp-testing/warp_api.py
      chown -R vagrant:vagrant /home/vagrant/warp-testing
    fi
    
    # Create a desktop shortcut for easy access
    sudo -u vagrant mkdir -p /home/vagrant/Desktop
    cat > /home/vagrant/Desktop/warp-testing.desktop << 'EOF'
[Desktop Entry]
Version=1.0
Type=Application
Name=Warp API Testing
Comment=Open Warp API testing directory
Exec=nautilus /home/vagrant/warp-testing
Icon=folder
Terminal=false
StartupNotify=true
EOF
    
    chmod +x /home/vagrant/Desktop/warp-testing.desktop
    chown vagrant:vagrant /home/vagrant/Desktop/warp-testing.desktop
    
    # Clean up package cache to save space
    apt-get clean
    apt-get autoremove -y >/dev/null 2>&1
    
    echo "‚è∞ Setup completed at: $(date)"
    echo "‚úÖ ULTRA-FAST VM setup complete!"
    echo "üéØ VM is ready for snapshot creation and testing"
    echo "üñ±Ô∏è GUI will auto-login and show setup status on next boot"
    
  SHELL
  
  # Quick test environment setup
  config.vm.provision "test_setup", type: "shell", run: "never", inline: <<-SHELL
    echo "üß™ Setting up clean test environment..."
    cd /home/vagrant/warp-testing
    
    # Clean previous test data
    rm -rf logs/* reports/* results/* screenshots/* 2>/dev/null || true
    
    # Sync latest API file
    if [ -f /vagrant/warp_api.py ]; then
      cp /vagrant/warp_api.py ./
      chmod +x warp_api.py
      chown vagrant:vagrant warp_api.py
    fi
    
    echo "‚úÖ Test environment ready for execution"
  SHELL
  
  # Test runner - runs Warp API tests inside VM
  config.vm.provision "run_tests", type: "shell", run: "never", inline: <<-SHELL
    echo "üß™ Starting Warp API tests inside VM..."
    export DEBIAN_FRONTEND=noninteractive
    export DISPLAY=:0
    
    # Wait for desktop to be ready
    echo "‚è≥ Waiting for desktop environment..."
    timeout=60
    elapsed=0
    while ! pgrep -x gnome-shell >/dev/null 2>&1 && ! pgrep -x gnome-session >/dev/null 2>&1; do
        if [ $elapsed -ge $timeout ]; then
            echo "‚ùå Desktop environment not ready after ${timeout}s"
            exit 1
        fi
        sleep 2
        elapsed=$((elapsed + 2))
        echo "‚è≥ Desktop loading... (${elapsed}/${timeout}s)"
    done
    
    echo "‚úÖ Desktop environment ready"
    
    # Navigate to test directory
    cd /home/vagrant/warp-testing
    
    # Show test start info
    echo "üöÄ Starting automated Warp API tests..."
    echo "‚è∞ Test started at: $(date)"
    echo "üìç Test location: $(pwd)"
    echo "üìã Available files:"
    ls -la
    echo ""
    
    # Check if warp_api.py exists
    if [ -f "warp_api.py" ]; then
        echo "‚úÖ Found warp_api.py - executing tests..."
        echo "" && echo "=" | head -c 80 && echo ""
        
        # Run the Warp API tests as vagrant user with proper display
        sudo -u vagrant bash -c '
            export DISPLAY=:0
            export HOME=/home/vagrant
            cd /home/vagrant/warp-testing
            
            # Run tests and capture exit code
            python3 warp_api.py
            echo $? > /tmp/test_exit_code
        '
        
        # Read the exit code
        test_exit_code=$(cat /tmp/test_exit_code 2>/dev/null || echo "1")
        rm -f /tmp/test_exit_code
        
        echo "" && echo "=" | head -c 80 && echo ""
        echo "‚è∞ Test completed at: $(date)"
        
        if [ "$test_exit_code" -eq 0 ]; then
            echo "‚úÖ All tests completed successfully!"
        else
            echo "‚ùå Tests completed with errors (exit code: $test_exit_code)"
        fi
        
        echo ""
        echo "üìã Test results and logs are available in:"
        echo "  - logs/ directory"
        echo "  - reports/ directory"
        echo "  - results/ directory"
        echo "  - screenshots/ directory"
        
        # Show a summary of what was created
        if ls logs/*.log >/dev/null 2>&1; then
            echo "üìÑ Log files created: $(ls logs/*.log | wc -l)"
        fi
        if ls reports/* >/dev/null 2>&1; then
            echo "üìä Report files created: $(ls reports/* | wc -l)"
        fi
        if ls screenshots/*.png >/dev/null 2>&1; then
            echo "üì∏ Screenshots created: $(ls screenshots/*.png | wc -l)"
        fi
        
        exit $test_exit_code
        
    else
        echo "‚ùå warp_api.py not found!"
        echo "üìÇ Available files:"
        ls -la
        echo ""
        echo "‚ö†Ô∏è Make sure warp_api.py is synced to the VM"
        exit 1
    fi
    
  SHELL
  
  # Fast cleanup
  config.vm.provision "test_cleanup", type: "shell", run: "never", inline: <<-SHELL
    echo "üßπ Fast cleanup..."
    
    # Kill any running processes
    pkill -f warp 2>/dev/null || true
    pkill -f xtrlock 2>/dev/null || true
    
    # Archive results
    cd /home/vagrant/warp-testing
    timestamp=$(date +%Y%m%d_%H%M%S)
    
    if ls logs/*.log >/dev/null 2>&1 || ls reports/* >/dev/null 2>&1; then
      tar -czf "/vagrant/test_results_${timestamp}.tar.gz" \
        logs/ reports/ results/ screenshots/ 2>/dev/null || true
      echo "üì¶ Results archived: test_results_${timestamp}.tar.gz"
    fi
    
    # Clean directories
    find logs reports results screenshots -type f -delete 2>/dev/null || true
    
    echo "‚úÖ Fast cleanup complete"
  SHELL
end